<?php

/**
 * AI rosters.
 */
class SRC_AI extends SRC_Core {

	private $iracing_ids;
	private $ai_result_saved;

	// List of cars ( use ~ instead of \\ to simplify code escaping).
	private $cars = array(
		'mx5~mx52016_67'                => 'Global Mazda MX-5 Cup',
		'porsche911cup_88'              => 'Porsche 911 GT3 Cup',
		'rt2000_1'                      => 'Formula Skip Barber 2000',
		'stockcars~camarozl12018_103'   => 'NASCAR Cup Series Chevrolet Camaro ZL1',
		'stockcars~toyotacamry_56'      => 'NASCAR Cup Series Toyota Camry',
		'stockcars~fordmustang2019_110' => 'NASCAR Cup Series Ford Mustang',
		'stockcars~impala_24'           => 'NASCAR K&N',
		'dallaraf3_106'                 => 'Dallara F3',
		'audirs3lms_112'                => 'Audi RS3 LMS TCR',
		'porsche718gt4_119'             => 'Porsche 718 GT4',
		'indypropm18_120'               => 'Indy Pro 2000 PM18',
		'usf2000usf17_121'              => 'USF 2000',
		'bmwm4gt4_122'                  => 'BMW M4 GT4',
	);

	/**
	 * Class constructor.
	 */
	public function __construct() {

		if ( isset( $_GET['ai_roster'] ) ) {
			add_action( 'init', array( $this, 'display_roster' ) );
		}

		add_shortcode( 'undiecar_ai_rosters', array( $this, 'shortcode' ) );

		// Results saving.
/*
		add_filter( 'the_content', array( $this, 'ai_form' ) );
		add_action( 'init', array( $this, 'ai_results_upload_save' ) );

		// Filter result stuff.
		add_filter(
			'undiecar_ai_number_races',
			function( $number ) {

				// Get season ID.
				if ( 'event' === get_post_type() ) {
					$season_id = get_post_meta( get_the_ID(), 'season', true );
				} else if ( 'season' === get_post_type() ) {
					$season_id = get_the_ID();
				} else {
					return $number;
				}

				if ( 'on' === get_post_meta( $season_id, 'ai_season', true ) ) {
					$number = 1; // We don't have AI races with more than one race.
				}

				return $number;
			}
		);

		add_filter( 'undiecar_ai_results', array( $this, 'ai_results' ) );
*/
	}

	/**
	 * Fudging roster by adding in extras.
	 * Some of these competitors joined the first AI test race.
	 * Some are just important members of the Undiecar community who aren't aways in the season points table.
	 *
	 * @param array $driver_points The drivers points.
	 * @return array The modified drivers points.
	 */
	public function fudge_roster( $driver_points ) {

		$extra_drivers = array(
			'Gennadii Stepanov' => '80',
			'Ivo Andreini'      => '30',
			'James N Payne'     => '75',
			'Justin Hess'       => '90',
			'Rik Scott'         => '40',
			'Chema Hache'       => '40',
			'Markus Kramer'     => '1',
			'Luis Morga'        => '30',
			'Matt Fretwell'     => '90',
			'Alex Skinner'      => '30',
			'Nikolay Ladushkin' => '90',
		);
		foreach ( $extra_drivers as $driver_name => $advised_points ) {
			if ( ! isset( $driver_points[ $driver_name ] ) ) {
				$driver_points[ $driver_name ] = $advised_points;
			}
		}

		return $driver_points;
	}

	/**
	 * Display the roster.
	 *
	 * @access private
	 */
	private function get_roster() {
		$current_season_points = self::get_driver_points_from_season( get_option( 'current-season' ) );
		$last_season_points    = self::get_driver_points_from_season( get_option( 'last-season' ) );

		// driver_points points from the two seasons.
		$driver_points = array();
		foreach ( array_keys( $current_season_points + $last_season_points ) as $key ) {
			$driver_points[ $key ] = ( isset( $current_season_points[ $key ] ) ? $current_season_points[ $key ] : 0 ) + ( isset( $last_season_points[ $key ] ) ? $last_season_points[ $key ] : 0 );
		}

		$driver_points = $this->fudge_roster( $driver_points );
		arsort( $driver_points );
		$max_points    = current( $driver_points );

		$roster = '{
	"intro": "' . sprintf( __( 'Generated by the Undiecar AI Roster %s %s.', 'undiecar' ), 'https://undiecar.com/ai-roster/', date( 'Y-m-d H:i:s' ) ) . '",
	"drivers": [';

		$count = 0;
		foreach ( $driver_points as $driver_name => $points ) {
			$count++;

			// Limit number of drivers.
			if ( isset( $_GET['number'] ) ) {
				$number = $_GET['number'];
			}
			if ( isset( $_GET['number'] ) && $count > $number ) {
				continue;
			}

			if ( isset( $member ) ) {
				$roster .= ',';
			}

			// Get member ID.
			$member = get_user_by( 'login', sanitize_title( $driver_name ) );
			if ( isset( $member->data->ID ) ) {
				$member_id = $member->data->ID;
			}

			// Get driver skill.
			$driver_skill = absint( 100 * ( ( count( $driver_points ) - $count ) / count( $driver_points ) ) );
			if ( 0 === $driver_skill ) {
				$driver_skill = 1; // Value of zero is not the worst.
			}

			// Get car number.
			if ( '' !== get_user_meta( $member_id, 'car_number', true ) ) {
				$car_number = get_user_meta( $member_id, 'car_number', true );
			} else {
				$car_number = rand( 100,300 );
			}
//https://undiecar.com/?ai_roster&display&cars=mx5~mx52016_67/porsche911cup_88
			// Get cars.
			if ( isset( $_GET['cars'] ) ) {
				$cars = explode( '/', $_GET['cars'] );
			} else {
				// Add default cars if none specified.
				$cars = array(
					0 => 'mx5~mx52016_67',
					1 => 'porsche911cup_88',
				);
			}

			if ( is_array( $cars ) ) {
				foreach ( $cars as $key => $car ) {
					$x = explode( '_', $car );
					if ( isset( $x[1] ) ) {
						$cars[ $key ] = array(
							'path' => str_replace( '~', '\\\\', $x[0] ),
							'id'   => $x[1],
						);
					}
				}
			}
			shuffle( $cars ); // Shuffle it to keep the car selection random.

			// Randomly select a car.
			$iracing_id  = get_user_meta( $member_id, 'custid', true );
			$uploads_dir = wp_upload_dir();
			$uploads_dir = $uploads_dir['path'] . '/paints/';
			$paint_file  = 'car_' . absint( $iracing_id ) . '.tga';
			$car_count   = count( $cars );
			$car_counter = 0;
			while ( $car_counter < $car_count ) {
				$car_path = $cars[ $car_counter ]['path'];
				$path     = $uploads_dir . $car_path . '/' . $paint_file;

				// Select the car.
				$car = $cars[ $car_counter ];
				if ( file_exists( $path ) ) {
					$car = $cars[ $car_counter ];
					break;
				}

				$car_counter++;
			}
			$car_id = $car['id'];

			// Storing iRacing ID (used later for getting paint files).
			$this->iracing_ids[ $car['path'] ][] = $iracing_id;

			// Get colour schemes.
			$helmet_design = get_user_meta( $member_id, 'helmet_design', true );
			if ( '' === $helmet_design ) {
				$helmet_design = '0,ee3442,447ac0,ffffff';
			}
			$suit_design = get_user_meta( $member_id, 'suit_design', true );
			if ( '' === $suit_design ) {
				$suit_design = '5,ee3442,447ac0,ffffff';
			}
			$car_design = get_user_meta( $member_id, 'car_design', true );
			if ( '' === $car_design ) {
				$car_design = '2,222958,447ac0,ffffff';
			}

			// Set how crazy the driver is.
			if ( isset( $_GET['mode'] ) && 'insane' === $_GET['mode'] ) {
				$driver_age        = '99';
				$driver_optimism   = '100';
				$driver_aggression = '100';
			} else {
				$driver_age        = '13';
				$driver_optimism   = '50';
				$driver_aggression = '65';
			}

			$roster .= '
		{
			"driverName": "' . esc_html( $driver_name ) . '",
			"carDesign": "' . esc_html( $car_design ) . '",
			"carNumber": "' . absint( $car_number ) . '",
			"suitDesign": "' . esc_html( $suit_design ) . '",
			"helmetDesign": "' . esc_html( $helmet_design ) . '",
			"carPath": "' . esc_html( $car_path ) . '",
			"carId": ' . absint( $car_id ) . ',
			"carClassId": 0,
			"sponsor1": 97,
			"sponsor2": 124,
			"numberDesign": "null,null,null,null",
			"driverSkill": ' . absint( $driver_skill ) . ',
			"driverAggression": ' . absint( $driver_aggression ) . ',
			"driverOptimism": ' . absint( $driver_optimism ) . ',
			"driverSmoothness": 0,
			"driverAge": ' . absint( $driver_age ) . ',
			"pitCrewSkill": 53,
			"strategyRiskiness": 72,
			"iracing_id": ' . absint( $iracing_id );

			// Add paint file reference if it exists.
			$uploads_dir = wp_upload_dir();
			$uploads_dir = $uploads_dir['path'] . '/paints/';
			$paint_file  = 'car_' . absint( $iracing_id ) . '.tga';
			$car_path    = str_replace( '\\\\', '~', $car_path );
			$path        = $uploads_dir . $car_path . '/' . $paint_file;
			if ( file_exists( $path ) ) {
				$roster .= ',
			"carTgaName": "car_' . absint( $iracing_id ) . '.tga"';
			}


			$roster .= '
		}';
		}

		$roster .= '
	]
}';

		return $roster;
	}

	/**
	 * Display the roster.
	 */
	public function display_roster() {

		if ( isset( $_GET['display'] ) ) {

			echo $this->get_roster();
			die;
		} else {
			$zip = new ZipArchive;
			$file_name = 'undiecar-roster.zip';
			if ( $zip->open( $file_name, ZipArchive::CREATE ) === TRUE ) {
				$dir_name = 'Undiecar';

				// Add a file new.txt file to zip using the text specified
				$zip->addFromString( $dir_name . '/roster.json', $this->get_roster() );

				// Add paint files.
				$uploads_dir = wp_upload_dir();
				$uploads_dir = $uploads_dir['path'] . '/paints/';
				foreach ( $this->iracing_ids as $car_slug => $iracing_ids ) {
					foreach ( $iracing_ids as $key => $iracing_id ) {
						$paint_file = 'car_' . absint( $iracing_id ) . '.tga';
						$path       = $uploads_dir . $car_slug . '/' . $paint_file;

						if ( file_exists( $path ) ) {
							$zip->addFile ( $path, $dir_name . '/' . $paint_file );	
						}
					}
				}

				// All files are added, so close the zip file.
				$zip->close();

				header( "Content-type: application/zip" );
				header( "Content-Disposition: attachment; filename=$file_name" );
				header( "Pragma: no-cache" );
				header( "Expires: 0" );
				readfile( $file_name );
				unlink( $file_name );
				exit;
			}
		}

	}

	/**
	 * The rosters shortcode.
	 */
	public function shortcode() {

		$content = '<form id="undiecar-rosters" method="get" action="">';

		$content .= '<label>Car #1</label>';
		$content .= '<select id="undiecar-car1" name="undiecar-car1">';
		$content .= '<option value="">' . esc_html__( 'None', 'undiecar' ) . '</option>';
		foreach ( $this->cars as $car_slug => $car_name ) {
			$content .= '<option value="' . esc_attr( $car_slug ) . '">' . esc_html( $car_name ) . '</option>';
		}
		$content .= '</select>';

		$content .= '<label>Car #2</label>';
		$content .= '<select id="undiecar-car2" name="undiecar-car2">';
		$content .= '<option value="">' . esc_html__( 'None', 'undiecar' ) . '</option>';
		foreach ( $this->cars as $car_slug => $car_name ) {
			$content .= '<option value="' . esc_attr( $car_slug ) . '">' . esc_html( $car_name ) . '</option>';
		}
		$content .= '</select>';

		$content .= '<label>Car #3</label>';
		$content .= '<select id="undiecar-car3" name="undiecar-car3">';
		$content .= '<option value="">' . esc_html__( 'None', 'undiecar' ) . '</option>';
		foreach ( $this->cars as $car_slug => $car_name ) {
			$content .= '<option value="' . esc_attr( $car_slug ) . '">' . esc_html( $car_name ) . '</option>';
		}
		$content .= '</select>';

		$content .= '<label>' . esc_html__( 'Number of cars', 'undiecar' ) . '</label>';
		$content .= '<input type="number" id="undiecar-number" value="30" name="undiecar-number" />';

		$content .= '<input id="undiecar-get-roster" type="submit" class="button" value="' . esc_attr__( 'Get roster', 'undiecar' ) . '" />';

		$content .= '</form>';


		$content .= "\n<script>
var undiecar_roster_button = document.getElementById( 'undiecar-get-roster' );
var undiecar_roster_form_url = '" . esc_url( get_permalink() ) . "';
undiecar_roster_button.addEventListener( 'click', function( e ) {
	let car1 = document.getElementById( 'undiecar-car1' ).value;
	let car2 = document.getElementById( 'undiecar-car2' ).value;
	let car3 = document.getElementById( 'undiecar-car3' ).value;

	// Nasty hard coded hack to create AI roster URL.
	let url_parts = '';
	if ( '' !== car1 ) {
		if ( '' === url_parts ) {
			url_parts = '?ai_roster&cars=' + car1;
		} else {
			url_parts = url_parts + '/' + car1;
		}
	}
	if ( '' !== car2 ) {
		if ( '' === url_parts ) {
			url_parts = '?ai_roster&cars=' + car2;
		} else {
			url_parts = url_parts + '/' + car2;
		}
	}
	if ( '' !== car3 ) {
		if ( '' === url_parts ) {
			url_parts = '?ai_roster&cars=' + car3;
		} else {
			url_parts = url_parts + '/' + car3;
		}
	}
	if (
		'' === car1
		&&
		'' === car2
		&&
		'' === car3
	) {
		url_parts = '?ai_roster';
	}
	let number = document.getElementById( 'undiecar-number' ).value;
	url_parts = url_parts + '&number=' + number;
	let url = undiecar_roster_form_url + url_parts;

	// Redirect instead of processing form submission.
	window.location = url;
	e.preventDefault();
} );
</script>\n";

		return $content;
	}

	/**
	 * Add form for AI result submission.
	 *
	 * @param  string  $content  The post content
	 * @return string  The modified post content
	 */
	public function ai_form( $content ) {

		// Bail out now if this is not an event.
		if ( 'event' !== get_post_type() ) {
			return $content;
		}

		// Bail out now if this is not an AI season race.
		$season_id = get_post_meta( get_the_ID(), 'season', true );
		if ( 'on' !== get_post_meta( $season_id, 'ai_season', true ) ) {
			return $content;
		}

		// Let them know their result was saved.
		if ( true === $this->ai_result_saved ) {
			return '<p>' . esc_html( 'Thanks for submitting your AI session result', 'undiecar' ) . '<br /><a class="button" href="' . esc_url( get_permalink( get_the_ID() ) ) . '">' . esc_html( 'Continue to results', 'undiecar' ) . '</a></p>';
		}

		// Display form.
		$content .= '<h2>' . esc_html__( 'AI race result submission', 'undiecar' ) . '</h2>';
		$content .= '<p>' . esc_html__( 'Upload your season .json file here.') . '</p>';
		$content .= '
<form action="" method="POST" enctype="multipart/form-data">

	<label for="undiecar-driver-name">Your iRacing name</label>
	<input type="text" name="undiecar-driver-name" id="undiecar-driver-name" value="" required aria-required="true" />

	<label for="undiecar-ai-json">Add season JSON file</label>
	<input type="file" name="undiecar-ai-json" id="undiecar-ai-json" accept="text/json" />

	<input type="hidden" name="undiecar-event-id" id="undiecar-event-id" value="' . esc_attr( get_the_ID() ) . '" />

	<input class="button" type="submit" value="Submit &#187;" />
	<input type="hidden" id="undiecar-ai-nonce" name="undiecar-ai-nonce" value="' . esc_attr( wp_create_nonce( __FILE__ ) ) . '">
</form>';

		return $content;
	}

	/**
	 * AI results upload save.
	 */
	public function ai_results_upload_save() {

		if ( ! isset( $_POST['undiecar-ai-nonce'] ) ) {
			return;
		}

		// Bail out if no results being sent.
		if (
			empty( $_POST['undiecar-driver-name'] )
			&&
			empty( $_POST['undiecar-event-id'] )
			&&
			empty( $_FILES['undiecar-ai-json']['tmp_name'] )
		) {
			return;
		}

		// Do nonce security check
		if ( ! wp_verify_nonce( $_POST['undiecar-ai-nonce'], __FILE__ ) ) {
			return;
		}

// Check car ID.

		$json = file_get_contents( $_FILES['undiecar-ai-json']['tmp_name'] );

		$driver_name = esc_html( $_POST['undiecar-driver-name'] );
		$event_id = absint( $_POST['undiecar-event-id'] );


// SAVE FILE TO META HERE. MAYBE SANTIZE WHERE POSSIBLE.


		$data = json_decode( $json, true );
//print_r( $data );die;
		if ( ! isset( $data['events'] ) ) {
			return;
		}

		foreach ( $data['events'] as $key => $event ) {

			// Check the track ID matches up.
			if ( ! isset( $event['trackId'] ) ) {
				return;
			}
			$track_id = $event['trackId'];
// CHECK TRACK ID HERE.

			if ( ! isset( $event['results']['session_results'] ) ) {
				return;
			}
			foreach ( $event['results']['session_results'] as $k => $results ) {

				if (
					isset( $results['simsession_type_name'] )
					&&
					isset( $results['results'] )
					&&
					'Race' === $results['simsession_type_name']
				) {
					$results = $results['results'];
					foreach ( $results as $x => $driver_result ) {
						if ( $driver_name === $driver_result['display_name'] ) {

							// Register driver if they don't exist already.
							$member    = get_user_by( 'login', sanitize_title( $driver_name ) );
							$driver_id = $member->ID;
							if ( empty( $member ) ) {
								$password = md5( $driver_name  . rand() );

								// should add display name in here, not just the username
								$driver_id = wp_insert_user(
									array(
										'user_login'   => sanitize_title( $driver_name  ),
										'display_name' => esc_html( $driver_name  ),
										'user_pass'    => $password,
									)
								);
							}
//foreach ( array( 2 => 'Ryan Bot 1', 5 => 'Ryan Bot 2', 6 => 'Ryan Bot 3', 1 => 'Ryan Hellyer' ) as $position => $driver_name ) {
//	$driver_result['position'] = $position;
							$result = array(
								'driver_name'       => esc_html( $driver_name ),
								'position'          => absint( $driver_result['position'] ),
								'time'              => esc_html( $driver_result['time'] ),
								'laps_complete'     => absint( $driver_result['laps_complete'] ),
								'incidents'         => absint( $driver_result['incidents'] ),
								'reason_out'        => esc_html( $driver_result['reason_out'] ),
								//'$car_number'        => esc_html( $driver_result['car_number'] ),
								'car_id'            => absint( $driver_result['car_id'] ),
								'cust_id'           => absint( $driver_result['cust_id'] ),
								'starting_position' => absint( $driver_result['starting_position'] ),
							);
							add_post_meta( $event_id, 'ai_result', $result );
//}

						}
					}

				}
			}
		}

		$this->ai_result_saved = true;
	}

	/**
	 * Filter the results if it's an AI race.
	 *
	 * @param array $results The results.
	 * @return array The modified results.
	 */
	public function ai_results( $results ) {

		// Get the season ID.
		if ( 'event' === get_post_type() ) {
			$season_id = get_post_meta( get_the_ID(), 'season', true );
		} else if ( 'season' === get_post_type() ) {
			$season_id = get_the_ID();
		} else {
			return $results;
		}

		// Bail out now if not on an AI event.
		if ( 'on' !== get_post_meta( $season_id, 'ai_season', true ) ) {
			return $results;
		}

		$ai_results = (array) get_post_meta( get_the_ID(), 'ai_result' );

		// Sort by finishing position.
		usort( $ai_results, function ($a, $b) {
			return $a['position'] <=> $b['position'];
		});

		// Only keep drivers best result.
		$driver_names = array_column( $ai_results, 'driver_name' );
		$driver_names = array_unique( $driver_names );
		$ai_results = array_filter( $ai_results, function ( $key, $value ) use ( $driver_names ) {
			return in_array( $value, array_keys( $driver_names ) );
		}, ARRAY_FILTER_USE_BOTH );

		$results = '';
		foreach ( $ai_results as $key => $result ) {
			if ( isset( $result['driver_name'] ) ) {

				if ( ! empty( $results ) ) {
					$results .= ',';
				}

				$results .= '{"name":"' . esc_html( $result['driver_name'] ) . '","car":"Hosted All Cars Class","qual_time":"00:01:30.4402","start_pos":3,"car_no":45,"position":' . absint( $result['position'] ) . ',"avg_lap_time":"00:01:33.1452","fastest_lap_time":"00:01:29.7471","fastest_lap":"8","interval":"00:00:00.0","reason_out":"Running","laps_led":7,"laps_completed":13,"incidents":0,"weight_penalty":"-1"}';
			}
		}

		$results = '[' . $results . ']';

		return $results;
	}
}
